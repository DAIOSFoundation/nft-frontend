{"ast":null,"code":"var _jsxFileName = \"/Users/daib-01/WebstormProjects/nft-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport contract from './contracts/ExampleNFT.json';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nconst PK = \"2cda07fd36def97a9edf2b3fbd831a414c5f68a31654a34782fccf782a1d8e4c\";\nconst NODE_URL = \"\";\nconst PROVIDER = new ethers.providers.JsonRpcProvider(NODE_URL);\nconst CONTRACT_ADDRESS = \"0x7f27e0aB939612F9b13d6bf6e3015a80A11B3b9f\";\nconst ABI = contract.abi;\nconst META_DATA_URL = \"http://localhost:8081/metaNFTs/\";\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"메타마스크가 설치되어 있는지 확인하세요.\");\n      return;\n    } else {\n      console.log(\"지갑이 확인되었습니다.\");\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.left !== 0) {\n      const account = accounts[0];\n      console.log(\"인증된 계좌 : \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"인증된 계좌가 없습니다.\");\n    }\n  };\n\n  const connectWalletHandler = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"메타마스크를 설치하세요.\");\n    }\n\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"계좌주소 : \", accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const mintNftHandler = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const wallet = new ethers.Wallet(PK, PROVIDER);\n        const signer = wallet.provider.getSigner(wallet.address);\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);\n        let nftTxn = await contract.mintNFT(CONTRACT_ADDRESS, META_DATA_URL);\n        console.log(\"민팅중이니 기다리세요...\");\n        await nftTxn.wait();\n        console.log(`성공!, 트랜젝션을 확인하세요 : https://mumbai.polygonscan.com//tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"트랜젝션이 확인되지 않습니다.\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWalletButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this);\n  };\n\n  const mintNftButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNftHandler,\n      className: \"cta-button mint-nft-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this);\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scrappy Squirrels Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentAccount ? mintNftButton() : connectWalletButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"vg9h9hqTAVJVjklrPXRRIAqzLN0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","contract","useEffect","useState","ethers","require","PK","NODE_URL","PROVIDER","providers","JsonRpcProvider","CONTRACT_ADDRESS","ABI","abi","META_DATA_URL","App","currentAccount","setCurrentAccount","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","left","account","connectWalletHandler","alert","err","mintNftHandler","wallet","Wallet","signer","provider","getSigner","address","Contract","nftTxn","mintNFT","wait","hash","connectWalletButton","mintNftButton"],"sources":["/Users/daib-01/WebstormProjects/nft-frontend/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport contract from './contracts/ExampleNFT.json';\nimport {useEffect, useState} from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nconst PK = \"2cda07fd36def97a9edf2b3fbd831a414c5f68a31654a34782fccf782a1d8e4c\"\nconst NODE_URL = \"\";\nconst PROVIDER = new ethers.providers.JsonRpcProvider(NODE_URL);\nconst CONTRACT_ADDRESS = \"0x7f27e0aB939612F9b13d6bf6e3015a80A11B3b9f\"\nconst ABI = contract.abi;\nconst META_DATA_URL = \"http://localhost:8081/metaNFTs/\"\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const {ethereum} = window;\n    if (!ethereum) {\n      console.log((\"메타마스크가 설치되어 있는지 확인하세요.\"));\n      return;\n    } else {\n      console.log(\"지갑이 확인되었습니다.\")\n    }\n\n    const accounts = await ethereum.request({method: 'eth_accounts'});\n    if (accounts.left !== 0) {\n      const account = accounts[0];\n      console.log(\"인증된 계좌 : \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"인증된 계좌가 없습니다.\");\n    }\n  }\n\n  const connectWalletHandler = async () => {\n    const {ethereum} = window;\n    if (!ethereum) {\n      alert(\"메타마스크를 설치하세요.\")\n    }\n\n    try {\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n      console.log(\"계좌주소 : \", accounts[0])\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const wallet = new ethers.Wallet(PK, PROVIDER);\n        const signer = wallet.provider.getSigner(wallet.address);\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);\n\n        let nftTxn = await contract.mintNFT(CONTRACT_ADDRESS, META_DATA_URL);\n\n        console.log(\"민팅중이니 기다리세요...\");\n        await nftTxn.wait();\n\n        console.log(`성공!, 트랜젝션을 확인하세요 : https://mumbai.polygonscan.com//tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"트랜젝션이 확인되지 않습니다.\");\n      }\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const connectWalletButton = () => {\n    return (\n        <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\n          Connect Wallet\n        </button>\n    )\n  }\n\n  const mintNftButton = () => {\n    return (\n        <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\n          Mint NFT\n        </button>\n    )\n  }\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, [])\n\n  return (\n      <div className='main-app'>\n        <h1>Scrappy Squirrels Tutorial</h1>\n        <div>\n          {currentAccount ? mintNftButton() : connectWalletButton()}\n        </div>\n      </div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}